*
 * File:   FinalProject.c
 * Author: fagen
 *
 * Created on March 31, 2021, 9:03 PM
 */


#include <xc.h>
#include <pic18f47k40.h>
#include <stdio.h>
#define _XTAL_FREQ 8000000
#define ADC_RES (5.0/1023.0)
#pragma config WDTE = OFF // turns off watchdog timer


// Variable and Function Definitions
int adc_conv=0; // conversion variable
char buf[50];
int resultHigh;
int resultLow;
char temp;
char data1;
char data2;
int resultHigh;
int resultLow;
int adc_value=0; // conversion variable 
int adc_volt=0;
int i;
int j;
int timer;
int temp3;
int temp1;
void lcd_init(void);
void ADC_init(void);
int ADC_conv(void);
void SPI_Initialize_Master(void);
void SPI_write(char data);
void lcd_command(char);
void lcd_char(char);
void ioinitial(void);
void buzzer(void);
void toggleled(void);
char sin[50] = {0x80,0x8f,0x9f,0xae,0xbc,0xc9,0xd5,0xe0,0xea,0xf2,0xf8,0xfc,0xff,0xfe,0xfb,0xfa,0xf6,0xef,0xe6,0xdc,
0xd1,0xc4,0xb6,0xa8,0x98,0x89,0x79,0x6a,0x5a,0x4c,0x3e,0x31,
0x25,0x1b,0x12,0x0a,0x05,0x00,0x02,0x06,0x0a,0x12,0x1b,
0x25,0x31,0x3e,0x4c,0x5a,0x6a,0x7c};
char square[50] = {0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,
0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,0x3FF,
0x3FF,0x3FF,0x3FF,0x3FF,0x3FF};
char saw [50]={0x00,0x05,0x0a,0x0f,0x14,0x19,0x1e,0x23,0x28,0x2d,0x32,0x37,0x3c,0x41,0x46,0x4b,
0x50,0x55,0x5a,0x64,0x69,0x6e,0x78,0x7d,0x82,0x87,0x8c,0x91,0x96,0x9b,0xa0,0xa4,0xa8,0xad,0xb2,0xb7,
0xbc,0xc1,0xc7,0xcc,0xd1,0xd6,0xdb,
0xe0,0xea,0xef, 0xf4,0xf9,0xfe,0xff};


// Main function controls the flow and logic of the uC
void main(void) {
SPI_Initialize_Master(); // Initializes SPI
ADC_init(); //Initializes ADC
lcd_init(); //Initializes LCD screen functionality
ANSELA=0; // turns analog off for specific I/O
ANSELD=0;
ioinitial();

while (1)
{
    ADC_conv();
    if(adc_value < 0x75)
    {
    lcd_char('S');
    lcd_char('y');
    lcd_char('s');
    lcd_char('t');
    lcd_char('e');
    lcd_char('m');
    lcd_char(' ');
    lcd_char('S');
    lcd_char('t');
    lcd_char('a');
    lcd_char('b');
    lcd_char('l');
    lcd_char('e');
    buzzer();
    //exit(0);
    }
    else if(adc_value > 0x75 && adc_value < 0x1C2 )
    {
    lcd_char('W');
    lcd_char('a');
    lcd_char('t');
    lcd_char('e');
    lcd_char('r');
    lcd_char(' ');
    lcd_char('W');
    lcd_char('a');
    lcd_char('r');
    lcd_char('n');
    lcd_char('i');
    lcd_char('n');
    lcd_char('g');
    buzzer();
    //exit(0);
    }
    else
    {
    lcd_char('C');
    lcd_char('R');
    lcd_char('I');
    lcd_char('T');
    lcd_char('I');
    lcd_char('C');
    lcd_char('A');
    lcd_char('L');
    lcd_char(' ');
    lcd_char('D');
    lcd_char('A');
    lcd_char('M');
    lcd_char('A');
    lcd_char('G');
    lcd_char('E');
    toggleled();
    buzzer();
    //exit(0);
    }
    
    
    
    
    
    
}


return;
}

void ADC_init(void)
{
 ADPCH = 0b00011000; //RD0 is Analog channel
 TRISDbits.TRISD0 = 1; //Set RD0 to input
 ANSELDbits.ANSELD0 = 1; //Set RD0 to analog
 ADCON0=0b10010100; // turns ADC ON, uses dedicated clock, right justified
}

void lcd_command(char x){
char temp;
TRISAbits.TRISA0 = 0;
TRISAbits.TRISA1 = 0;
TRISAbits.TRISA2 = 0;
TRISAbits.TRISA3 = 0;
TRISAbits.TRISA4 = 0;
TRISAbits.TRISA6 = 0;
temp = x;
PORTA = 0;
__delay_ms(16);
x = x >>4;
x = x & 0xF;
x = x | 0x40;
PORTA = x;
__delay_ms(10);
x = x & 0xF;
PORTA = x;
__delay_ms(10);
PORTA = 0;
__delay_ms(10);
x = temp;
x = x & 0xF;
x = x | 0x40;
PORTA = x;
__delay_ms(10);
x = x & 0xF;
PORTA = x;
__delay_ms(10);
}

void lcd_init(void){
lcd_command(0x33);
lcd_command(0x32);
lcd_command(0x2C);
lcd_command(0x0C);
lcd_command(0x01);
//__delay_ms(50);
}

void lcd_char(char x){
char temp;
TRISAbits.TRISA0 = 0;
TRISAbits.TRISA1 = 0;
TRISAbits.TRISA2 = 0;
TRISAbits.TRISA3 = 0;
TRISAbits.TRISA4 = 0;
TRISAbits.TRISA6 = 0;
temp = x;
PORTA = 0x10;
__delay_ms(16);
x = x >>4;
x = x & 0xF;
x = x | 0x50;
PORTA = x;
__delay_ms(10);
x = x & 0x1F;
PORTA = x;
__delay_ms(10);
PORTA = 0x10;
__delay_ms(10);
x = temp;
x = x & 0xF;
x = x | 0x50;
PORTA = x;
__delay_ms(10);
x = x & 0x1F;
PORTA = x;
__delay_ms(10);
}

void SPI_Initialize_Master(void)
{
    SSP1CON1 |=0b00100000; //pg 497 enables serial port, idle state is low level, clock is fosc/4
    SSP1STAT |=0b11000000;
    TRISCbits.TRISC0 = 0;  //SDA
    TRISCbits.TRISC1 = 0;  //SCL
    TRISCbits.TRISC2 = 0;  //CS   all set as outputs
   // SSP1DATPPS=0b00010000;
    //SSP1CLKPPS=0b00010001;
       // SSP1 Clock Pin Peripheral Selection  
    SSP1CLKPPSbits.PORT = 2; // (Port C)
    SSP1CLKPPSbits.PIN  = 1; // (Pin 1)
        // SPI1 Data  Pin Peripheral Selection
    SSP1DATPPSbits.PORT = 2;
    SSP1DATPPSbits.PIN  = 0;
    ANSELC=0; // turns analog off for 
    RC0PPS=0x10; //peripheral pin map to c0 for data
    RC1PPS=0x0F; // C1 maps to clock
    PORTCbits.RC2 = 1; // enable to 1
}
void SPI_write(char data)
{
temp = data;
//data1=0b10010000 | data >> 6;
data1= data >> 4 |0b10010000;
PORTCbits.RC2 = 0;   // enable to 0
SSP1BUF = data1;
while(!SSP1STATbits.BF);
//data2 = temp & 0x3F;
//data2 = data2 << 2;
data2=temp << 4;
//data2= temp << 4;
SSP1BUF= data2;
while(!SSP1STATbits.BF);
PORTCbits.RC2 = 1;   // enable to 1
}

int ADC_conv(void)
{
ADCON0bits.GO = 1; //Start conversion
 while (ADCON0bits.GO); //Wait for conversion done
 resultHigh = ADRESH; //Read result
 resultLow = ADRESL; //Read result
 //adc_conv = (ADRESH << 8) | (ADRESL);
 adc_value = resultLow + (resultHigh *256);
 //adc_volt = adc_conv * ADC_RES*1;
 return adc_value;
}

void ioinitial(void)
{
   TRISD=0b01000100;// sets port D pins 2 and 6 as input PB, pin 3 led output
   
}

void buzzer (void)
{
    while(1)
    {
    if(PORTDbits.RD2 && PORTDbits.RD6) //if both buttons are pressed
   {
        for (i=0; i<50; ++i)
         {
            SPI_write(saw[i]);
            __delay_us(10);
                            }
   }
   else if(!PORTDbits.RD2 && PORTDbits.RD6) //
   {
        for (i=0; i<50; ++i)
         {
            SPI_write(square[i]);
            __delay_us(10);
                            }
   }
   else if(PORTDbits.RD2 && !PORTDbits.RD6) //
   {
        for (i=0; i<50; ++i)
         {
            SPI_write(sin[i]);
            __delay_us(5);
                            }
   }

    }
}
void toggleled(void)
{
    for (int k=0; k<50; ++k)
    {
    LATDbits.LATD3 ^= 1; // toggles LED Bit
    __delay_ms(12.5); //flashes LED at 20 Hz
    }


}